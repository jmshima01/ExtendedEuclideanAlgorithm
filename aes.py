from sys import argv

def part_a(s,latex=False):
    b = [s[i:i+2].upper() for i in range(0,32,2)]
    
    print_latex = lambda x : print(x) if latex else None
    print_latex("\\[")
    print_latex("\\begin{array}{|c|c|c|c|}")
    
    t = [[""]*4 for i in range(4)]
    c = 0
    for i in range(4):
        for j in range(4):
            if latex == True:
                t[i][j] = b[c]
            else:
                t[j][i] = b[c]
            c+=1
    
    for i in range(4):
        print_latex("\hline")
        print_latex(f"{' & '.join(t[i]).upper()}\\\\")
    print_latex("\hline")
    print_latex("\end{array}\n\] ")
    
    if latex == False:
        for i in t:
            print(i)
            

def part_b(p,k):
    p = int(p,16)
    k = int(k,16)
    xor = p^k
    xor = f"{xor:032x}"
    # print(xor)
    part_a(xor,False)
    return xor

def part_c(s):
    SBOX = (
            (0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76),
            (0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0),
            (0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15),
            (0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75),
            (0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84),
            (0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF),
            (0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8),
            (0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2),
            (0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73),
            (0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB),
            (0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79),
            (0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08),
            (0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A),
            (0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E),
            (0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF),
            (0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16)
            )
    t = [[0]*4 for i in range(4)]
    c = 0
    for i in range(4):
        for j in range(4):
            x = int(s[c],16)
            y = int(s[c+1],16)
            t[j][i] = f"{SBOX[x][y]:02x}".upper()
            c+=2
    
    s = ""
    for i in t:
        print(i)
        for j in i:
            s+=j
    
    # part_a(s,True)
    return t

def part_d(t):
    def lcs(l): 
        t=l[0] 
        l = l[1:]
        l.append(t)
        return l
    for i in range(4):
        for _ in range(i):
            t[i] = lcs(t[i])
    s = ""
    for i in t:
        print(i)
        for j in i:
            s+=j
    
    # part_a(s,False)
    return t


def gf256_multiply(a,b):
    
    if int(b,16)>int(a,16):
        a,b = b,a
    
    f = bin(int(a,16))[2:].zfill(8)
    g = bin(int(b,16))[2:].zfill(8)

    def f_by_x(f):
        lcs = lambda x: x[1:]+'0'
        if f[0] == '0':
            return lcs(f)
        else:
            return bin(int(lcs(f),2) ^ 0x1B)[2:].zfill(8)

    res = f
    xor = []
    for i,v in enumerate(g[::-1]):
        if v == '1':
            for _ in range(i):
                res = f_by_x(res)
            xor.append(int(res,2))
    fin = xor[0]
    for i in range(1,len(xor)):
        fin ^= xor[i]
    
    return hex(fin)[2:].zfill(2).upper()

def gf256_add_lis(lis):
    fin = int(lis[0],16)
    for i in range(1,len(lis)):
        fin ^= int(lis[i],16)
    
    return hex(fin)[2:].zfill(2).upper()

def part_e(t):
    M = (
        (0x02, 0x03, 0x01,0x01),
        (0x01, 0x02, 0x03, 0x01),
        (0x01, 0x01, 0x02, 0x03),
        (0x03, 0x01, 0x01, 0x02))
    
    T = [[0]*4 for i in range(4)]
    E = [[0]*4 for i in range(4)]
    for i in range(4):
        for j in range(4):
            T[j][i] = t[i][j]
    
    M_rows = [[hex(i)[2:].zfill(2) for i in M[k]] for k in range(4)]

    for i in M[0]:
        i = hex(i)[2:].zfill(2)
    
    for i in range(4):
        for j in range(4):
            E[j][i] = gf256_add_lis([gf256_multiply(M_rows[j][k],T[i][k]) for k in range(4)])
    e = ""
    for i in E:
        print(i)
        for j in i:
            e+=j
    # part_a(e,True)
    
if __name__ == "__main__":
    print("=== part a ===")
    part_a(argv[1],False)
    print("==============\n")

    print("=== part b ===")
    keyadd = part_b(argv[1],argv[2])
    print("==============\n")
    
    print("=== part c ===")
    s = part_c(keyadd)
    print("==============\n")
    
    print("=== part d ===")
    shift_row = part_d(s)
    print("==============\n")

    print("=== part e ===")
    mix_col = part_e(shift_row)
    print("==============\n")

    
    